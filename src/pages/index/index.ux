<import name="better-online-image" src="@components/BetterOnlineImage/BetterOnlineImage.ux" />
<import name="switch-bar" src="@components/SwitchBar/SwitchBar.ux" />

<template>
  <div class="page">
    <scroll
      class="scroll {{ scrclass }} list"
      scroll-y="{{ scrollable }}"
      onscroll="scroll"
      onscrolltop="scrolltop"
      ontouchstart="touchstart"
      ontouchmove="touchmove"
      ontouchend="touchend"
    >
      <switch-bar title="NapCatQQ"></switch-bar>

      <div
        for="{{ virtualList }}"
        tid="$item.item.msgId"
        style="position: absolute; top: {{ $item.offset }}px;"
      >
        <div class="item item-visible" onclick="openChat($item.item)" if="{{ shouldShow($item) }}">
          <div class="line">
            <better-online-image
              border-radius="99px"
              width="42px"
              height="42px"
              cache-time="86400000"
              src="{{ getAvatar($item.item) }}"
            ></better-online-image>
            <text class="title">{{ $item.item.peerName }}</text>
            <text class="time">{{ $app.$def.getTimestampStr($item.item.msgTime) }}</text>
          </div>
          <div class="line">
            <text class="content">
              {{ $item.item.chatType !== 1 ? $item.item.lastestMsg.sender.nickname + ":" : ""
              }}{{ getPreview($item.item.lastestMsg) }}
            </text>
          </div>
        </div>

        <!-- 占位容器，保持整体高度，避免可视区外渲染 -->
        <div class="item item-placeholder" else></div>
      </div>

      <text style="width: 0px; height: 0px; opacity: 0">{{ scrollY }}</text>
      <text class="refresh" style="top:{{ refreshTop }}px;" show="{{ refreshTop>-50 }}">
        {{ refreshText }}
      </text>
      <image
        class="refresh"
        src="/common/loading_reversed_transparent.gif"
        if="{{ loading }}"
      ></image>
    </scroll>
    <div class="actions">
      <img src="/common/settings.png" class="action" />
      <img src="/common/my.png" class="action" />
    </div>
  </div>
</template>

<script>
//小米傻逼linter你完了
import router from "@system.router"
import {getAvatarUrl} from "../../qq/avatarHelper"
import {getMessagesPreview} from "../../qq/message"

//const pageSize = 7
const itemHeight = 126
const headerHeight = 90
//const debounceTime = 100
//let offset = 0
//let debounceTimer = null

export default {
  private: {
    scrclass: "",
    recent_msg: null,
    //虚拟列表
    virtualList: [],
    //下拉刷新逻辑
    scrollable: true,
    scrollToppd: true,
    refreshText: "下拉刷新",
    refreshTop: -50,
    loading: true,
    scrollY: 0
  },
  openChat(msg) {
    router.push({
      uri: "pages/chat",
      params: {
        chatTargetName: msg.peerName,
        chatTargetId: msg.peerUin,
        chatType: msg.chatType
      }
    })
  },
  getAvatar(msg) {
    return getAvatarUrl(msg.chatType, msg.peerUin)
  },
  getPreview(msg) {
    return getMessagesPreview(msg.message)
  },

  shouldShow(item) {
    return item.offset + itemHeight > this.scrollY && item.offset < this.scrollY + 466
  },

  async gRC() {
    this.recent_msg = (await global.qq.List.getRecentContact()).data
    this.loading = false
    this.updateVirtualList(0)
  },
  async onInit() {
    try {
      await this.gRC()
    } catch (e) {
      global.logger.error(e)
    }
  },
  updateVirtualList(offset) {
    this.virtualList = this.recent_msg.map((item, index) => {
      return {
        item,
        offset: (offset + index) * itemHeight + headerHeight
      }
    })
  },
  scroll({scrollY}) {
    this.scrollY = scrollY
    this.scrollToppd = scrollY === 0
    /* 若后续需要做窗口复用，可在此处计算 newOffset 并调用 updateVirtualList */
  },
  scrolltop() {
    this.scrollToppd = true
  },
  touchstart({changedTouches}) {
    if (!this.scrollToppd) return
    this.startY = changedTouches[0].clientY
  },
  touchmove({changedTouches}) {
    if (!this.scrollToppd || !this.startY) return
    const currentY = changedTouches[0].clientY
    const deltaY = currentY - this.startY
    if (deltaY < 0) return (this.scrollable = true)
    this.scrollable = false
    // 阻力系数：下拉越多越难
    const resistanceFactor = 0.003
    const adjustedDeltaY = deltaY / (1 + resistanceFactor * deltaY)
    this.refreshTop = Math.min(480, adjustedDeltaY - 50)
    if (deltaY > 100) {
      this.loading = true
      this.refreshText = "松开刷新"
    } else {
      this.loading = false
      this.refreshText = "下拉刷新"
    }
  },
  touchend() {
    if (!this.scrollToppd) return
    this.scrollable = true
    this.refreshTop = -50
    if (this.refreshText == "松开刷新") {
      this.loading = true
      try {
        this.gRC()
      } catch (e) {
        global.logger.error(e)
      }
    }
  }
}
</script>

<style lang="less">
@import "@less/global.less";

.list {
  align-items: center;
}

.item {
  height: 116px;
  background-color: #262626;
  flex-direction: column;
  width: 400px;
  border-radius: 36px;
  padding: 16px;
  margin-top: 10px;
  transform-origin: 200px 58px;
}

.item-visible {
  animation-name: listFadeIn;
  animation-duration: 400ms;
  animation-timing-function: ease-out;
  animation-fill-mode: both;
  will-change: opacity, transform;
}

.item-placeholder {
  opacity: 0;
}

@keyframes listFadeIn {
  0% {
    opacity: 0.5;
    transform: scale(0.8);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

.title {
  font-size: 32px;
  flex: 1;
  lines: 1;
  margin-left: 10px;
  font-weight: bold;
  text-overflow: ellipsis;
}
.content {
  font-size: 26px;
  color: rgba(255, 255, 255, 0.6);
  lines: 1;
  text-overflow: ellipsis;
}
.avatar {
  width: 42px;
  height: 42px;
  border-radius: 99px;
  margin-right: 10px;
  flex-shrink: 0;
}
.time {
  font-size: 28px;
  color: rgba(255, 255, 255, 0.6);
  text-align: right;
  flex-shrink: 0;
}
.line {
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  height: 42px;
}
.refresh {
  position: absolute;
  transform: translateY(90px);
  top: 20px;
  text-align: center;
  background-color: rgba(0, 0, 0, 0.8);
  padding: 10px;
  border-radius: 99px;
  transform-origin: 50% 50%;
}

.actions {
  position: absolute;
  bottom: 0px;
  left: 0;
  width: 466px;
  height: 91px;
  flex-direction: row;
  justify-content: center;
  align-items: center;
}
.action {
  position: relative;
  margin-left: 5px;
  margin-right: 5px;
  box-shadow: 0px 12px 24px 0px rgba(0, 0, 0, 0.4);
  border-radius: 99px;
}
</style>
