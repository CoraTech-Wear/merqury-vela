<import name="title-bar" src="@components/TitleBar/TitleBar.ux"></import>
<import name="qq-message" src="@components/QQComps/Message/Message.ux"></import>
<import name="input-overlay" src="@components/InputOverlay/InputOverlay.ux"></import>
<import name="image-button" src="@components/ImageButton/ImageButton.ux"></import>

<template>
  <div class="page">
    <scroll scroll-y="true" class="scroll {{ scrclass }}" bounces="true">
        <title-bar title="{{ chatTargetName }}"></title-bar>
        <scroll id="msgscroll" class="list" scroll-y="true" bounces="true" if="{{ messages }}">
            <qq-message for="{{ messages }}" msg="{{ $item }}" type="{{ chatType }}" target="{{chatTargetId}}"></qq-message>
        </scroll>
        <div class="actions">
          <image-button style="margin-left: 5px; margin-right: 5px;" src="/common/mic.png" type="action"></image-button>
          <image-button style="margin-left: 5px; margin-right: 5px;" src="/common/keyboard.png" type="action" @click="showInput"></image-button>
        </div>
        <image style="position: absolute; top: 230px" src="/common/loading_reversed.gif" if="{{ !messages }}"></image>
    </scroll>
    <input-overlay @ok="inputOK" keyboard-hide="{{hideInput}}" style="position: absolute"></input-overlay>
  </div>
</template>

<script>
import prompt from "@system.prompt";
import record from "@system.router";
import app from "@system.app";

export default {
  public: {
    chatTargetName: "聊天",
    chatTargetId: 10001,
    chatType: 1
  },
  private: {
    scrclass: "",
    messages: null,
    hideInput: true
  },
  async loadMessages(count){
    if (this.chatType == 2){
        this.messages = (await global.qq.Message.getGroupMessageHistory(this.chatTargetId, undefined, Number(count))).data.messages;
    }else{
        this.messages = (await global.qq.Message.getPrivateMessageHistory(this.chatTargetId, undefined, Number(count))).data.messages;
    }

    setTimeout(() => {
        this.$element('msgscroll').scrollTo({
            top: 99999, // It just works.
            behavior: "smooth"
        })
    }, 800) // 也许它可能需要一些渲染时间 我不知道 但好像真是
  },
  async inputOK(data) {
    this.hideInput = true;

    if(data.detail.confirmPressed){
      if(data.detail.content){
        let msg = [{type: "text", data: {text: data.detail.content}}]
        if (this.chatType == 2){
          await global.qq.Message.sendGroupMessage(this.chatTargetId, msg);
        }else {
          await global.qq.Message.sendPrivateMessage(this.chatTargetId, msg)
        }
      }
      else {
        prompt.showToast({
          message: "不可发送空消息"
        })
      }
    }
  },
  showInput() {
    this.hideInput = false;
  },
  sendRecord() {
    if(app.canIUse('@system.record')){

    }
    else{
      prompt.showToast({
        message: "当前设备不支持录音接口"
      })
    }
  },
  onReady(){
    global.logger.log(`Load: ${this.chatTargetName} ${this.chatTargetId} ${this.chatType}`)
    const messageCount = global.config.read(c => c.messageCount)
    this.loadMessages(messageCount);
  }
}
</script>

<style lang="less">
@import "src/less/global.less";
.actions {
  position: absolute;
  bottom: 0px;
  left: 0;
  width: 466px;
  height: 91px;
  flex-direction: row;
  justify-content: center;
  align-items: center;
}
</style>
